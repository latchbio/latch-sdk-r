% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/registry_table.R
\name{RegistryTable}
\alias{RegistryTable}
\title{Registry table. Contains \link[=RegistryRecord]{records}.}
\description{
\href{RegistryProject.html#method-RegistryProject-list_tables}{\code{RegistryProject$list_tables()}}
is the typical way to get a \code{RegistryTable}.
}
\seealso{
Other Registry APIs: 
\code{\link{RegistryColumn}},
\code{\link{RegistryInvalidValue}},
\code{\link{RegistryProject}},
\code{\link{RegistryRecord}}
}
\concept{Registry APIs}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{String. Unique identifier.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RegistryTable-new}{\code{RegistryTable$new()}}
\item \href{#method-RegistryTable-print}{\code{RegistryTable$print()}}
\item \href{#method-RegistryTable-load}{\code{RegistryTable$load()}}
\item \href{#method-RegistryTable-get_display_name}{\code{RegistryTable$get_display_name()}}
\item \href{#method-RegistryTable-get_columns}{\code{RegistryTable$get_columns()}}
\item \href{#method-RegistryTable-list_records}{\code{RegistryTable$list_records()}}
\item \href{#method-RegistryTable-clone}{\code{RegistryTable$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-new"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-new}{}}}
\subsection{Method \code{new()}}{
Get the representation of a specific table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$new(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{String. The ID of the target table.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-print"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-print}{}}}
\subsection{Method \code{print()}}{
Print a human-readable representation of this table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-load"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-load}{}}}
\subsection{Method \code{load()}}{
(Re-)populate this table instance's cache.

Future calls to most getters will return immediately without
making a network request.

Always makes a network request.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$load()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-get_display_name"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-get_display_name}{}}}
\subsection{Method \code{get_display_name()}}{
Get the display name of this table.

This is an opaque string that can contain any valid Unicode data.

Display names are \emph{not unique} and \emph{must never be used as identifiers}.
Use \code{id} instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$get_display_name(load_if_missing = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{load_if_missing}}{Logical.\cr
If \code{TRUE}, \code{\link[=load]{load()}} the display name if not in cache.
If \code{FALSE}, return \code{NULL} if not in cache.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
String value of the display name.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-get_columns"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-get_columns}{}}}
\subsection{Method \code{get_columns()}}{
Get the columns of this table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$get_columns(load_if_missing = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{load_if_missing}}{Logical.\cr
If \code{TRUE}, \code{\link[=load]{load()}} the columns if not in cache.
If \code{FALSE}, return \code{NULL} if not in cache.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Named list of \link[=RegistryColumn]{columns} of this table.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-list_records"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-list_records}{}}}
\subsection{Method \code{list_records()}}{
List records contained in this table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$list_records(page_size = 100)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{page_size}}{Number of records to return at a time}

\item{\code{load_if_missing}}{Logical.\cr
If \code{TRUE}, \code{\link[=load]{load()}} the records if not in cache.
If \code{FALSE}, return \code{NULL} if not in cache.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{\link[coro:generator]{coro::generator()}} returning pages of \link[=RegistryRecord]{records} from
this table.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RegistryTable-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RegistryTable-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RegistryTable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
